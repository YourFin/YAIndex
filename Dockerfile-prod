FROM ubuntu:eoan as builder

ENV APP_PATH=/app
WORKDIR ${APP_PATH}

RUN apt-get update -y && apt-get install curl -y

# Install nodejs 13
RUN curl -sL https://deb.nodesource.com/setup_13.x | bash - && \
  apt-get install -y nodejs

# Install pnpm
RUN npm install --global pnpm

# Install js dependecies
COPY package.json ${APP_PATH}/package.json
COPY pnpm-lock.yaml ${APP_PATH}/pnpm-lock.yaml
RUN pnpm install --frozen-lockfile

# Copy application files
COPY . ${APP_PATH}

# Hopefully get around elm's annoying proclivity to not download everything
RUN bin/elm-install

# Actually compile 
RUN pnpm run prod-build

#######################
# Heroku final server #
#######################
FROM ubuntu:eoan

#Install nginx, envsubst, tooling for sshing in
RUN apt-get update -y
RUN apt-get install -y nginx gettext-base openssh-server python vim curl

# Allow heroku remote debugging
RUN rm /bin/sh \
  && ln -s /bin/bash /bin/sh \
  && mkdir -p /app/.profile.d
ADD ./bin/heroku-exec.sh /app/.profile.d/heroku-exec.sh

WORKDIR /opt/yaindex

# Configure nginx
RUN useradd -ms /bin/false nginx
# Explicitly remove default nginx.conf
RUN rm /etc/nginx/nginx.conf

# Copy application files
COPY --from=builder /app/dist dist
COPY nginx/nginx.template.conf nginx/nginx.template.conf
COPY bin bin
COPY test_files /test_files/
RUN chmod -R a+r /test_files/ \
        && chmod -R a+r dist


EXPOSE 80

CMD /app/.profile.d/heroku-exec.sh && /opt/yaindex/bin/run-prod.sh
